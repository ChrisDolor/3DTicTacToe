
#include <stdio.h>
#include <stdlib.h>
#include <time.h>		// for the srand(time(NULL))
#include <windows.h>	// for the wait() function.

/**
 *	Displays the grid. Just pass the 3D array.
 **/

void displaygrid(char g[3][3][3])
{
	printf("\n");
	printf("		       [3D TIC TAC TOE GRID]				\n\n");
	printf("\t    1   2   3        1   2   3        1   2   3\n");
	printf("\t  -------------    -------------    -------------\n");
	printf("\t1 | %c | %c | %c |   1| %c | %c | %c |   1| %c | %c | %c |\n", g[0][0][0], g[0][1][0], g[0][2][0], g[1][0][0], g[1][1][0], g[1][2][0], g[2][0][0], g[2][1][0], g[2][2][0]);
	printf("\t  -------------    -------------    -------------\n");
	printf("\t2 | %c | %c | %c |   2| %c | %c | %c |   2| %c | %c | %c |\n", g[0][0][1], g[0][1][1], g[0][2][1], g[1][0][1], g[1][1][1], g[1][2][1], g[2][0][1], g[2][1][1], g[2][2][1]);
	printf("\t  -------------    -------------    -------------\n");
	printf("\t3 | %c | %c | %c |   3| %c | %c | %c |   3| %c | %c | %c |\n", g[0][0][2], g[0][1][2], g[0][2][2], g[1][0][2], g[1][1][2], g[1][2][2], g[2][0][2], g[2][1][2], g[2][2][2]);
	printf("\t   ------------    -------------    -------------\n");
	printf("\t         1               2                3\n\n");
}

/**
 *	Set the grid to blank
 **/
void initialize(char g[3][3][3])
{
	int i, j, k;
	for( i = 0; i < 3; i++ ) 
	{
		for( j = 0; j < 3; j++ ) 
		{
			for( k = 0; k < 3; k++ ) 
			{
				g[i][j][k] = ' ';
			}
		}
	}
}

/**
 *	Random chooser for the computer
 **/
void choosecomputer(char g[3][3][3], char computer)
{
	int x;
	int y;
	int z;
	
	do
	{
		x = rand() % 3;		// random value from 0~2
		y = rand() % 3;		// random value from 0~2
		z = rand() % 3;		// random value from 0~2
	}while(g[x][y][z] != ' ');	// if the spot is not blank, repeat
	printf("\t\t Computer chooses x:%d, y:%d, z:%d\n\n", x, y, z);
	g[x][y][z] = computer;
}

/**
 *	Checks if the player (either human or computer) wins
 *	by looping or manually checking the win conditions
 *	
 *		returns 1 if win
 *				0 if not win (not nesseracily lose)
 **/
int checkwin(char g[3][3][3], char player)
{
	int win = 0;
	int i, j;
	
	for( i = 0; i < 3; i++ )
		for( j = 0; j < 3; j++ )
			if(g[i][j][0] == player && g[i][j][1] == player && g[i][j][2] == player) 
				win = 1;
		
	for( i = 0; i < 3; i++ )
		for( j = 0; j < 3; j++ )
			if(g[i][0][j] == player && g[i][1][j] == player && g[i][2][j] == player) 
				win = 1;
		
	for( i = 0; i < 3; i++ )
		for( j = 0; j < 3; j++ )
			if(g[0][i][j] == player && g[1][i][j] == player && g[2][i][j] == player) 
				win = 1;
				
	for( i = 0; i < 3; i++ )
		if(g[i][0][0] == player && g[i][1][1] == player && g[i][2][2] == player) 
			win = 1;
			
	for( i = 0; i < 3; i++ )
		if(g[0][i][0] == player && g[1][i][1] == player && g[2][i][2] == player) 
			win = 1;
			
	for( i = 0; i < 3; i++ )
		if(g[0][0][i] == player && g[1][1][i] == player && g[2][2][i] == player) 
			win = 1;
		
	if(g[0][0][0] == player && g[1][1][1] == player && g[2][2][2] == player) 
		win = 1;
	if(g[0][0][2] == player && g[1][1][1] == player && g[2][2][0] == player) 
		win = 1;
	if(g[2][0][0] == player && g[1][1][1] == player && g[0][2][2] == player) 
		win = 1;
	if(g[2][0][2] == player && g[1][1][1] == player && g[0][2][0] == player) 
		win = 1;
	if(g[0][2][0] == player && g[1][1][1] == player && g[2][0][2] == player) 
		win = 1;

	return win;
}

/**
 *	Gets an input from the user. axis represents for the display whether is 'x', 'y', or 'z' for flexibility
 *	Has error checking to reduce redundancy
 **/

int getloc(char axis) {
	int n;
	int again = 1;
	do {
		printf("\t\t\t%c: ", axis);
		fflush(stdin);			// safe guard against that annoying skip when inputting something. it tends to happen at times especially with %c
		
		scanf("%d", &n);
		if(n > 3 || n < 1 )		// repeat if out of bounds ( ei more than 3 or less than 1)
		{
			printf("\t\t%c is out of bounds! Choose between 1~3 only!!!\n\n", axis);
			again = 1;
		}else {
			again = 0;
		}
	}while(again);
	return n;		// return the input
}
/**
 *	Game mode. Human player vs computer player
 *	PLayer is human controlled.
 *	Computer is randomly controlled (no AI).
 **/
void playcomputer()
{
	char grid[3][3][3];
	int turn = 0;
	int over = 0;
	char player;
	char computer;
	int inputx;
	int inputy;
	int inputz;
	int again = 0;
	srand(time(NULL));	// random seed, to allow a "truely" random. without this, computer will have the same result each time you open the program
	
	initialize(grid);	// set grid to blank
	printf("\n\n\tEnter a character as your tile (x or o): ");
	scanf("%c", &player);
	
	if(player != 'x' && player != 'X')		// select a tile. whether x or o;
		computer = 'x';
	else if(player != 'o' && player != 'O')		// computer picks either 'o' or 'x' only
		computer = 'o';
		
	printf("\n\n\tComputer has chosen \'%c\' as it's tile\n\n", computer);
	
	while(!over) 	// game not over yet
	{
		displaygrid(grid);
		
		if(turn == 0) 
		{
			do {
				printf("\t\t\t--- Player turn --- \n");
				printf("\t\t\t\tInput\n");
				inputx = getloc('x');		// get input. error handling inside the function
				inputy = getloc('y');
				inputz = getloc('z');
				
				if(grid[inputz - 1][inputx - 1][inputy - 1] == ' ')		// if the spot is blank
				{
					grid[inputz - 1][inputx - 1][inputy - 1] = player;		// place the tile
					again = 0;
				}else
				{
					printf("\t\t\tInvalid Input!\n\n");
					again = 1;
				}
			}while(again);		// repeat if invalid input
			
			if(checkwin(grid, player)) {	//calls the function checkwin to check if game has winner already
				printf("\n\n\t\t ===== PLAYER, YOU WIN!!!! ===== \n");
				over = 1;		// player wins, end game
			}
		}
		else 
		{
			printf("\t\t\t--- Computer turn --- \n");
			printf("\t\t\t thinking");
    		Sleep(rand() % 250 + 250);		// delay to simulate "thinking". fake thinking.
			printf(".");
    		Sleep(rand() % 250 + 250);
			printf(".");
    		Sleep(rand() % 250 + 250);
			printf(".\n\n");
    		Sleep(rand() % 250 + 250);
			choosecomputer(grid, computer);		// computer randomly chooses a spot to place its tile
    		Sleep(rand() % 1000 + 1000);
			
			if(checkwin(grid, computer)) {		// check if win; calling function checkwin
				printf("\n\n\t\t ===== THE COMPUTER WINS!!!! ===== \n");
				over = 1;
			}
		}
		
		turn = (turn + 1) % 2;		// next turn	
	}
	
	displaygrid(grid);		// display grid one last time

}
/**
 *	Game mode. Human player 1 vs Human player 2
 *	Both are human controlled.
 *	Logic is relatively the same, just replace computer with another player.
 **/

void playplayer()
{
	char grid[3][3][3];
	int turn = 0;
	int over = 0;
	char firstplayer;
	char secondplayer;
	int inputx;
	int inputy;
	int inputz;
	int again = 0;
	srand(time(NULL));
	
	initialize(grid);
	printf("\n\n\tPLAYER 1: Enter a character as your tile (x or o): ");
	scanf("%c", &firstplayer);
	
	do {	// loop in case player 2 picks same tile as player 1, its not allowed.
		printf("\tPLAYER 2: Enter a character as your tile (x or o): ");
		fflush(stdin);
		scanf("%c", &secondplayer);
		
		if(firstplayer == secondplayer)
			printf("\tAlready chosen! Choose again\n\n");
	}while(firstplayer == secondplayer);
	
	while(!over) 
	{
		displaygrid(grid);
		
		if(turn == 0) 
		{
			do {
				printf("\t\t\t--- Player 1 turn --- \n");
				printf("\t\t\t\tInput\n");
				inputx = getloc('x');
				inputy = getloc('y');
				inputz = getloc('z');
				
				if(grid[inputz - 1][inputx - 1][inputy - 1] == ' ')
				{
					grid[inputz - 1][inputx - 1][inputy - 1] = firstplayer;
					again = 0;
				}else
				{
					printf("\n\n\t\t\tSpot already taken!!! Invalid Input!\n\n");
					again = 1;
				}
			}while(again);
			
			if(checkwin(grid, firstplayer)) {
				printf("\t\t===== PLAYER 1, YOU WIN!!!! =====\n");
				over = 1;
			}
		}
		else 
		{
			do {
				printf("\t\t\t--- Player 2 turn --- \n");
				printf("\t\t\t\tInput\n");
				inputx = getloc('x');
				inputy = getloc('y');
				inputz = getloc('z');
				
				if(grid[inputz - 1][inputx - 1][inputy - 1] == ' ')
				{
					grid[inputz - 1][inputx - 1][inputy - 1] = secondplayer;
					again = 0;
				}else
				{
					printf("\n\n\t\t\tSpot already taken!!! Invalid Input!\n\n");
					again = 1;
				}
			}while(again);
			
			if(checkwin(grid, secondplayer)) {
				printf("\n\n\t\t ===== PLAYER 2, YOU WIN!!!! ===== \n");
				over = 1;
			}
		}
		
		turn = (turn + 1) % 2; // next turn
	}
	
	displaygrid(grid);
}

void displaymenu()
/**
 *	Purely output for displaying the menu
 **/
{
	printf("\n\n\n");
	printf("\t\t\t[3D TIC TAC TOE]\n\n");
	printf("\t\t\tGame Developed by:\n");
	printf("\t\t\tJerome Alejandrino\n\t\t\tChristian Dolor\n\t\t\tGann Isisdro\n\n\n");
	printf("\t\t[P] - Play Against Computer\n");
	printf("\t\t[V] - Play Against Player\n");
	printf("\t\t[E] - Exit\n\n");
	printf("\t\t\tInput: ");
}

int main()
{
	char dump;
	char input;
	int gameover = 0;
	
	while(!gameover) {	
		displaymenu();
		fflush(stdin);		// safe guard against skipping the %c, it tends to happen.
		scanf("%c", &dump);		// safe guard against skipping the %c, it tends to happen.
		scanf("%c", &input);
		
		switch(dump) {
			case 'P':		// Player vs Computer Mode
			case 'p':
				playcomputer();
				printf("\n\n\t\t\tQuit? 1 - yes 0 - Main Menu: ");
				scanf("%d", &gameover);		// in case the player wants to play again after the game
				break;
			case 'V':
			case 'v':
				playplayer();	// Player vs Player mode
				printf("\n\n\t\t\tQuit? 1 - yes 0 - Main Menu: ");
				scanf("%d", &gameover);		// in case the player wants to play again after the game
				break;
			case 'E':		// Exit the game
			case 'e':
				gameover = 1;
				break;
			default:
				printf("\n\tInvalid input! Try again\t\n");
		}
	}

	return 0;
}
